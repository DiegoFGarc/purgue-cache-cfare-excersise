node {

    stage('init') {
        env.ENVIRONMENT = params.ENV
        env.PURGE_CACHE_JOB = "purgue-cloudfare-cache"
        def URLS = params.urls
    }

    stage('flush_cache') {
        try {
    // code that might throw an exception
    sh 'my-command-that-might-fail arg1 arg2'
  try
    // handling the exception
    echo "Error: ${e.message}"
  }
        try {
            def purgeCacheJob = build job: "${PURGE_CACHE_JOB}", parameters: [
                string(name: "urls", value: "${URLS}"),
                string(name: "ENV", value: "${ENV}")
            ], wait: true
            //def jobResult = purgeCacheJob.result
            //sh 'echo "${jobResult}"'
         } catch (Exception e) {
            echo "Error: ${e.message}"
        }
    }

    stage('validate_cache_purge') {
        def buildInfo = purgeCacheJob
        if (buildInfo != null) {
            jobStatus = buildInfo.result
        }
        if (jobStatus == hudson.model.Result.SUCCESS) {
            def build_user = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
            env.BUILD_USER = build_user.userName
            echo "${env.BUILD_USER} purged cache for the following development resources: \n ${params.urls}"
        } else {
            echo "ERROR: Cache purge job failed"
            error("Cache purge job failed") // Marcar el build como fallido
        }
    }
}