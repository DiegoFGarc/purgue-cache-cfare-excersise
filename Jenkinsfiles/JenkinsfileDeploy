node {

    env.GIT_BRANCH_DEVOPS = 'main'
    env.GIT_TARGET_DIRECTORY_DEVOPS = "${WORKSPACE}"
    env.GIT_CHECKOUT_PATH_DEVOPS = 'cdn-purge-cache/ansible'
    env.GIT_REPOSITORY_DEVOPS = 'https://github.com/DiegoFGarc/purgue-cache-cfare-excersise'
    env.GIT_KEY = '68100f4c-d1f7-45ed-a2fd-4b3a2a3e4ba0'
    env.SOURCE = "${GIT_TARGET_DIRECTORY_DEVOPS}/${GIT_CHECKOUT_PATH_DEVOPS}/templates/requests.j2"
    env.DEST = "${GIT_TARGET_DIRECTORY_DEVOPS}/requests.sh"
    env.ANSIBLE_SOURCE_PATH = "${GIT_TARGET_DIRECTORY_DEVOPS}/${GIT_CHECKOUT_PATH_DEVOPS}"
    env.ENVIRONMENT = params.ENV

    /*
    stage('checkout'){
        checkout([
                    $class: "GitSCM",
                    branches: [[name: "${GIT_BRANCH_DEVOPS}"]],
                    extensions: [
                    [$class: "SparseCheckoutPaths",
                    sparseCheckoutPaths:[[$class:'SparseCheckoutPath', path: "${GIT_CHECKOUT_PATH_DEVOPS}"]]],
                    [$class: "RelativeTargetDirectory",
                    relativeTargetDir: "${GIT_TARGET_DIRECTORY_DEVOPS}/${GIT_CHECKOUT_PATH_DEVOPS}"]
                    ],
                    userRemoteConfigs: [[
                    url: "${GIT_REPOSITORY_DEVOPS}",
                    credentialsId: "${GIT_KEY}"
                    ]]
                ])
    }
    */
    
    stage('validate_parameters') {
        def valuesText = params.urls
        def valuesList = valuesText.split("\n")
        if ("${ENVIRONMENT}" == "prod") {
                env.SUBDOMAIN = "embed"
        } else {
                env.SUBDOMAIN = "embed-env"
        }
        for (value in valuesList) {
            if (value.contains("https://${SUBDOMAIN}.cartfulsolutions.com") && value.contains('https')) {
                echo "The url value is valid!: ${value}"
            } else {
                error("The url parameter value is invalid for: ${value}. Must be 'https://${SUBDOMAIN}.cartfulsolutions.com' or 'https'.")
            }
        }
    }
    
    stage('get_status') {
        withCredentials([
            string(credentialsId: 'token_cloudfare', variable: 'CLOUDFLARE_TOKEN'),
            string(credentialsId: 'cloudfare_zone_id', variable: 'CLOUDFLARE_ZONE_ID')
        ]){
            def valuesText = params.urls
            def valuesList = valuesText.split("\n")
            def concatenatedValues = ""

            for (value in valuesList) {
                concatenatedValues += value.trim() + ","
            }

        // Delete last comma
            concatenatedValues = concatenatedValues[0..-2]

        // Assign the environment variable
            env.COMMA_VALUES = concatenatedValues
            sh '''
            echo "***********Generating Script***********"
            ansible-playbook $ANSIBLE_SOURCE_PATH/template.yml --extra-vars="urls=$COMMA_VALUES token_cloudfare=$CLOUDFLARE_TOKEN zone_id=$CLOUDFLARE_ZONE_ID SOURCE=$SOURCE DEST=$DEST"
            '''
        }
    }
    
    stage('cloudfare_api') {
        sh 'bash requests.sh PurgeCache'
    }

    stage('send_notification') {
        def build_user = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
        env.BUILD_USER = build_user.userName
        echo "${env.BUILD_USER} purged cache for the following development resources: \n ${params.urls}"
    }

}